/*
Copyright 2022 The KubeZoo Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package filters

import (
	"net/http"

	"k8s.io/apiserver/pkg/authentication/serviceaccount"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/klog"

	"github.com/kubewharf/kubezoo/pkg/util"
)

// WithTenantInfo creates an http handler that tries to add tenant info to user info generated by authentication filter
func WithTenantInfo(handler http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
		user, ok := request.UserFrom(req.Context())
		if !ok {
			klog.Warningf("no user info found after authentication filter")
			handler.ServeHTTP(w, req)
			return
		}

		namespace, _, err := serviceaccount.SplitUsername(user.GetName())
		if err != nil {
			// this user info is not generated by service account authentication filter
			handler.ServeHTTP(w, req)
			return
		}
		tenantID, err := util.GetTenantIDFromNamespace(namespace)
		if err != nil {
			klog.Warningf("failed to get tenant id from service account namespace: %s, err: %v", namespace, err)
			handler.ServeHTTP(w, req)
			return
		}

		req = req.WithContext(request.WithUser(req.Context(), util.AddTenantIDToUserInfo(tenantID, user)))
		handler.ServeHTTP(w, req)
	})
}
